---
title: "1) Git introduction"
date: "`r Sys.time()`"
date-format: "ddd, D of MMMM, YYYY"
date-modified: last-modified
lang: en
editor: source
engine: knitr
## ------  general Output Options
execute:     
  eval: false    # actually run? 
  echo: true     #  include source code in output
  warning: false  #  include warning code in output
  error: false    #  include error code in output
  output: false   # include output code in output (CHG in BLOCKS)
  # include: false   # R still runs but code and results DON"T appear in output  
  cache: false # normalmnte false
toc: true
fig-cap-location: top
tbl-cap-location: top
format:
  html:
    # theme: flatly #spacelab
    code-fold: true # redundant bc echo false 
    toc-depth: 3
    toc_float: true
    toc-location: left
    toc-title: Outline
    embed-resources: true # external dependencies embedded (Not in ..._files/)
  # pdf:
  #   toc-depth: 2
  #   toc-title: Indice
  #   highlight-style: github
  #   #lang: it
  #   embed-resources: true # external dependencies embedded (Not in ..._files/)
format-links: false
---

::: {.callout-caution collapse="false"}
Web page construction in progress...
:::

# Frist: some useful terminal commands

+ shift+Q --> to exit from git dialogue 
+ highlight [cmd + D] --> to seleect all subsequent instances 
+ highlight [alt + drag] --> to edit at begin of each lines 
+ highlight [cmd + shift + L] --> to edit at the end of each lines 
+ highlight [ctr + shift + W] --> wrapping  text with start and end tag 

# Git installation

...

# Git architecture

...

+ **`origin`**	= origin stands for the *remote repository*. When we use `git push -u origin local_branch_name`, it tells the system that we want to push our local branch to the remote repository. Usually there is one default remote repository and origin represents this default repository.
  + If you don’t like this name, you can rename it by using 
  `git remote rename origin new_name`

+ **`HEAD`**	= the last commit of the active/current branch. Each repository only has one current branch, hence one HEAD as well. If you want to check where the HEAD of a repository is pointing to, run `cat .git/HEAD`

+ **`Detached HEAD`** happens when a checkout command is applied to a specific historical commit, tag or remote branch.

+ **`master`**	master is a branch, the default branch, the main branch, and it’s always there.

+ **`branch`**	branch is a like a fork in the history of a repository. One branch represents an independent line of development, like a fork teeth.

+ **`index`**	index is the proposed next commit, also called staging area. 

# Git commands

See @fig-git_wfl 

+ `git status`	    = View the state of working directory and staging area
+ `git add`       = Stage changes for next commit 
+ `git commit`    = Commit the staged snapshot to the local repository    
+ `git push`      = Upload local repository content to a remote repository
  + 4 TEAM: it makes your local changes publicly available in a remote repository.  
+ `git clone`     = Copies an entire remote repository down to your local machine, setting up a cloned version and checks out the default branch (generally master)
  + this action is done only once.
+ `git fetch`     = Download content from remote repository, but doesn’t force the merge 
  + 4 TEAM: if a developer has pushed changes to a remote branch, those changes will be pulled down to your repository whenever fetch is performed.
     + Note: fetch won't automatically merge any changes, only update references!
+ `git merge`     = Join two branches together
+ `git pull`      = Combo of git fetch and git merge  

<!-- NO link in image -->
<!-- ![title](location){#fig-reference} -->
![Git Workflow](./img_tools/GitWorkflow-4.png){#fig-git_wfl}

Source: [cloudstudio.com.au](https://cloudstudio.com.au/2021/06/26/git-command/)

<!-- YES link in image -->
<!-- ::: {#fig-git_wfl}
[![Git Workflow](./img_tools/GitWorkflow-4.png)](https://cloudstudio.com.au/2021/06/26/git-command/)
::: -->
 
## Difference b/w `git fetch` & `git pull`


## Difference b/w `git merge` & `git rebase`
https://blog.git-init.com/differences-between-git-merge-and-rebase-and-why-you-should-care/

# References

+ [The Pragmatic Git](https://blog.git-init.com/git-gold/) blogsite

-----

# Collaboration

1. I create a test GH account **lula-test**  (associated to l__a__a@icloud.com)

2. I clone in  `/Users/testuser/GH_test/nerd_help` this repository "nerd-help" I own as **Lulliter** and (from there (I indicated that **lula-test** is a collaborator)


```{bash}
# positioned in parent folder /Users/testuser/GH_test/
git clone https://github.com/Lulliter/nerd_help.git
cd nerd_help
```

### **Rules** 

+ THE MASTER BRANCH SHOULD ALWAYS BE DEPLOYABLE
  + you create new branches for new features and merge them into Master when they’re completed. 

  + It’s also important when collaborating that your team picks features that don’t have overlapping code. 

3. Here I create a new branch **colors_page** and I go there 
  ```{bash}
#  I create a new branch to add a color.qmd page 
git checkout -b colors_page 
```

In the branch, the collabrorator makes some changes 